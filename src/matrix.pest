// num = @{ int ~ ("." ~ ASCII_DIGIT*)? ~ (^"e" ~ int)? }
//     int = { ("+" | "-")? ~ ASCII_DIGIT+ }

Int = @{ ("+" | "-") ~ ASCII_DIGIT+ }
Uint = @{ ASCII_DIGIT+ }
Dec = @{ Uint ~ "." ~ ASCII_DIGIT* ~ (^"e" ~ Uint)? }
Hex = @{ "0x" ~  ASCII_HEX_DIGIT+ }
Ident = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC)* }
Bool = { "true" | "false" }
Underscore = { "_" }
ArrTy = { "[" ~ Ty ~ ";" ~ (Uint | Underscore) ~ "]" }
MatrixTy = { "[" ~ Ty ~ ";" ~ ((Uint | Underscore) ~ "x" ~ (Uint | Underscore)) ~ "]"}
Ty = { Ident | ArrTy | MatrixTy | Unit }

Expr = { Assign }
Assign = { Or ~ (AssignOp ~ Or)* }
    AssignOp = {"="}
Or = { And ~ (OrOp ~ And)* }
    OrOp = {"|"}
And = { Equality ~ (AndOp ~ Equality)* }
    AndOp = {"&"}
Equality = { Comparative ~ (EqOp ~ Comparative)* }
    EqOp = {"==" | "!="}
Comparative = { Additive ~ (CompOp ~ Additive)* }
    CompOp = {"<=" | "<" | ">=" | ">"}
Additive = { Multiplicative ~ ( AddOp ~ Multiplicative)* }
    AddOp = {"+" | "-"}
Multiplicative = { Unary ~ (MultOp ~ Unary)* }
    MultOp = {"*" | "/" | "%" }
Unary = { UnaryOp* ~ Exponential }
    UnaryOp = {"+" | "-" | "!"}
Exponential = { Invoke ~ (ExpOp ~ Invoke)* }
    ExpOp = {"^"}
Invoke = { Term ~ (InvokeOp)* }
    InvokeOp = { "(" ~ (Expr ~ ("," ~ Expr)* ~ ","? )? ~")" | "[" ~ (Expr ~ ("," ~ Expr)* ~ ","? )? ~ "]" }
Term = { If | Ident | Dec | Uint | Block | Hex | Bool | Array | Matrix | Group | Unit }

If = { "if" ~ Expr ~ Block ~ ( "else" ~ "if" ~ Expr ~ Block )* ~ ("else" ~ Block )? }
Block = {"{" ~ "\n"* ~ (Expr ~ "\n"*)* ~ "}" }
Array = { "[" ~ Expr ~ ("," ~ Expr)* ~","? ~ "]"}
Matrix = { "[" ~ ((Row ~ (";" ~ Row)* ~ ";"?) | (Row ~ ";")) ~ "]" }
Row = { Expr ~ ("," ~ Expr)* }
Group = { "(" ~ Expr ~ ")" }
Unit = { "()" }

Func = { "let" ~ Ident ~ "(" ~ Arg ~("," ~ Arg)* ~ ")" ~ Ty ~ "=" ~ Expr }
    Arg = ${Ident ~ WHITESPACE+ ~ Ty }

Program = _{ SOI ~ "\n"* ~ ((Func | Expr) ~ "\n"*)* ~ EOI}

WHITESPACE = _{ " " | "\t" | "\n" }